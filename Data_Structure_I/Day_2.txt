1. Two Sum
    (Array, Hash Table)

    Question:

        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

        You may assume that each input would have exactly one solution, and you may not use the same element twice.

        You can return the answer in any order.

        

        Example 1:

        Input: nums = [2,7,11,15], target = 9
        Output: [0,1]
        Output: Because nums[0] + nums[1] == 9, we return [0, 1].
        Example 2:

        Input: nums = [3,2,4], target = 6
        Output: [1,2]
        Example 3:

        Input: nums = [3,3], target = 6
        Output: [0,1]
        

        Constraints:

        2 <= nums.length <= 104
        -109 <= nums[i] <= 109
        -109 <= target <= 109
        Only one valid answer exists.

    Code:

        (i)Brute Force O(n^2)
            public int[] twoSum(int[] nums, int target) {
                int[] ans = new int[2];
                for(int i = 0; i < nums.length; i++){
                    ans[0] = i;
                    for(int j = i + 1; j < nums.length; j++){
                        if(nums[i] + nums[j] == target){
                            ans[1] = j;
                            return ans;                    
                        }
                    }
                }
                return ans;
            }

        (ii)O(n)
            class Solution {
                public int[] twoSum(int[] nums, int target) {
                    int[] result = new int[2];
                    HashMap<Integer, Integer> map = new HashMap<>();
                    for (int i = 0; i < nums.length; i++) {
                        if (map.containsKey(target - nums[i])) {
                            result[1] = i;
                            result[0] = map.get(target - nums[i]);
                            return result;
                        }
                        map.put(nums[i], i);
                    }
                    return result;

                }
            }

88. Merge Sorted Array
    (Array, Two Pointers, Sorting)

    Question:

        You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

        Merge nums1 and nums2 into a single array sorted in non-decreasing order.

        The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

        

        Example 1:

        Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
        Output: [1,2,2,3,5,6]
        Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
        The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
        Example 2:

        Input: nums1 = [1], m = 1, nums2 = [], n = 0
        Output: [1]
        Explanation: The arrays we are merging are [1] and [].
        The result of the merge is [1].
        Example 3:

        Input: nums1 = [0], m = 0, nums2 = [1], n = 1
        Output: [1]
        Explanation: The arrays we are merging are [] and [1].
        The result of the merge is [1].
        Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
        

        Constraints:

        nums1.length == m + n
        nums2.length == n
        0 <= m, n <= 200
        1 <= m + n <= 200
        -109 <= nums1[i], nums2[j] <= 109
    
    Code:
        class Solution {
            public void merge(int[] nums1, int m, int[] nums2, int n) {
                m--;
                n--;
                for(int i = m+n+1; i >= 0; i--){
                    if(n >= 0 && m >= 0){
                        if(nums1[m] >= nums2[n]){
                            nums1[i] = nums1[m];
                            m--;
                        }else{
                            nums1[i] = nums2[n];
                            n--;
                        }
                    }else if(m >= 0){
                        nums1[i] = nums1[m];
                            m--;
                    }else if(n >= 0){
                        nums1[i] = nums2[n];
                            n--;
                    }
                }
            }
        }