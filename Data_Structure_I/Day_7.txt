141. Linked List Cycle
    (Hash Table, Linked List)

    Question:

        Given head, the head of a linked list, determine if the linked list has a cycle in it.

        There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

        Return true if there is a cycle in the linked list. Otherwise, return false.

        

        Example 1:


        Input: head = [3,2,0,-4], pos = 1
        Output: true
        Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
        Example 2:


        Input: head = [1,2], pos = 0
        Output: true
        Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
        Example 3:


        Input: head = [1], pos = -1
        Output: false
        Explanation: There is no cycle in the linked list.
        

        Constraints:

        The number of the nodes in the list is in the range [0, 104].
        -105 <= Node.val <= 105
        pos is -1 or a valid index in the linked-list.

    Code:
        
        public class Solution {
            public boolean hasCycle(ListNode head) {
                
                if(head == null || head.next == null){
                    return false;
                }
                ListNode slow = head, fast = head;
                
                while(fast != null && fast.next != null){
                    slow = slow.next;
                    fast = fast.next.next;
                    if(slow == fast){
                        return true;
                    }         
                }        
                return false;
            }
        }

21. Merge Two Sorted Lists
    (Linked List, Recursion)

    Question:

        You are given the heads of two sorted linked lists list1 and list2.

        Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

        Return the head of the merged linked list.

        

        Example 1:


        Input: list1 = [1,2,4], list2 = [1,3,4]
        Output: [1,1,2,3,4,4]
        Example 2:

        Input: list1 = [], list2 = []
        Output: []
        Example 3:

        Input: list1 = [], list2 = [0]
        Output: [0]
        

        Constraints:

        The number of nodes in both lists is in the range [0, 50].
        -100 <= Node.val <= 100
        Both list1 and list2 are sorted in non-decreasing order.

    Code:
        class Solution {
            public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
                
                
                if(list1==null && list2==null){
                    return null;
                }
                else if(list1==null && list2!=null){
                    return list2;
                }
                else if(list1!=null && list2==null){
                    return list1;
                }
                else{
                            
                    ListNode fListHead=null;
                    ListNode fListTail=null;
                    
                    while(list1!=null && list2!=null){
                        
                        if(list1.val<=list2.val){
                            if(fListHead==null){
                                fListHead=list1;
                                fListTail=list1;
                            }else{
                                fListTail.next=list1;
                                fListTail=list1;
                            }
                            list1=list1.next;
                        }else{
                            if(fListHead==null){
                                fListHead=list2;
                                fListTail=list2;
                            }else{
                                fListTail.next=list2;
                                fListTail=list2;
                            }
                            list2=list2.next;
                        }
                        
                    } 
                    
                    
                    if(list1 != null){
                        fListTail.next=list1;
                    }else{
                        fListTail.next=list2;
                    }
        //             while(list2!=null){
        //                 fListTail.next=list2;
        //                 fListTail=list2;
        //                 list2=list2.next;
        //             }
                    
        //             // if list 1 remains non-empty
        //              while(list1!=null){
        //                 fListTail.next=list1;
        //                 fListTail=list1;
        //                 list1=list1.next;
        //             }
                    
                    // fListTail.next=null;
                    return fListHead;
                
                }
                
            } 
        }

203. Remove Linked List Elements
    (Linked List, Recursion)

    Question:
        Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

    

        Example 1:


        Input: head = [1,2,6,3,4,5,6], val = 6
        Output: [1,2,3,4,5]
        Example 2:

        Input: head = [], val = 1
        Output: []
        Example 3:

        Input: head = [7,7,7,7], val = 7
        Output: []
        

        Constraints:

        The number of nodes in the list is in the range [0, 104].
        1 <= Node.val <= 50
        0 <= val <= 50
        
    Code:
        class Solution {
        
            
            public ListNode removeElements(ListNode head, int val) {
                if(head == null){
                    return null;
                }
                ListNode ans = new ListNode(0, head); 
                
                ListNode slow = ans;
                ListNode fast = head;
                
                while(fast != null && fast.val == val){
                    fast = fast.next;
                }
                slow.next = fast;
                while(fast != null){
                    if(fast.val == val){
                        slow.next = fast.next;
                        fast = fast.next;
                        continue;
                    }
                    fast = fast.next;
                    slow = slow.next;
                }
                
                return ans.next;
                
            }
        }