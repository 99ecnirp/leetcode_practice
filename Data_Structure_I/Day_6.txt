387. First Unique Character in a String
    (Hash Table, String, Queue)

    Question:

        Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

    

        Example 1:

        Input: s = "leetcode"
        Output: 0
        Example 2:

        Input: s = "loveleetcode"
        Output: 2
        Example 3:

        Input: s = "aabb"
        Output: -1
        

        Constraints:

        1 <= s.length <= 105
        s consists of only lowercase English letters.

    Code:
        class Solution {
        //     public int firstUniqChar(String s) {
        //         HashMap<Character, Integer> map = new HashMap<>();
        //         for(int i = 0; i < s.length(); i++){
        //             //char ch = s.charAt(i);
        //             if(map.containsKey(s.charAt(i))){
        //                 map.put(s.charAt(i), map.get(s.charAt(i))+1);
        //             }else{
        //                 map.put(s.charAt(i),1);
        //             }
        //         }
        //         for(int i = 0; i < s.length(); i++){
        //             //char ch = s.charAt(i);
        //             if(map.get(s.charAt(i)) == 1){
        //                 return i;
        //             }
        //         }
        //         return -1;
                
        //     }
            
            public int firstUniqChar(String s) {
                if(s == null || s.isEmpty()) return -1;
                int min = Integer.MAX_VALUE;
                
                for(char c = 'a'; c <= 'z'; c++) {
                    int first = s.indexOf(c);
                    int last = s.lastIndexOf(c);
                    
                    if(first != -1 && first == last) {
                        min = Math.min(min, first);
                    }
                }
                return min == Integer.MAX_VALUE ? -1 : min;
            }
        }

383. Ransom Note
    (Hash Table, String, Counting)

    Question:
        Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.

        Each letter in magazine can only be used once in ransomNote.

        

        Example 1:

        Input: ransomNote = "a", magazine = "b"
        Output: false
        Example 2:

        Input: ransomNote = "aa", magazine = "ab"
        Output: false
        Example 3:

        Input: ransomNote = "aa", magazine = "aab"
        Output: true
        

        Constraints:

        1 <= ransomNote.length, magazine.length <= 105
        ransomNote and magazine consist of lowercase English letters.

    Code :
        class Solution {
            // public boolean canConstruct(String ransomNote, String magazine) {
            //     HashMap<Character, Integer> map = new HashMap<>();
            //     for(int i = 0; i < magazine.length(); i++){
            //         //char ch = s.charAt(i);
            //         if(map.containsKey(magazine.charAt(i))){
            //             map.put(magazine.charAt(i), map.get(magazine.charAt(i))+1);
            //         }else{
            //             map.put(magazine.charAt(i),1);
            //         }
            //     }
            //     for(int i = 0;i < ransomNote.length(); i++){
            //         if(!map.containsKey(ransomNote.charAt(i)) || map.get(ransomNote.charAt(i)) == 0){
            //             return false;
            //         }
            //         map.put(ransomNote.charAt(i), map.get(ransomNote.charAt(i))-1);
            //     }
            //     return true;
            // }
            
            public boolean canConstruct(String ransomNote, String magazine) {
                if(ransomNote.length() > magazine.length()){
                    return false;
                }
                int[] hash = new int[26];
                for (char c : magazine.toCharArray())
                    ++hash[c-'a'];
                for (char c : ransomNote.toCharArray())
                    if (--hash[c-'a'] < 0) 
                        return false;
                return true;
            }
        }

242. Valid Anagram
    (Hash Table, String, Sorting)

    Question:
        Given two strings s and t, return true if t is an anagram of s, and false otherwise.

        An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

        

        Example 1:

        Input: s = "anagram", t = "nagaram"
        Output: true
        Example 2:

        Input: s = "rat", t = "car"
        Output: false
        

        Constraints:

        1 <= s.length, t.length <= 5 * 104
        s and t consist of lowercase English letters.

    Code:
        class Solution {
            public boolean isAnagram(String s, String t) {
                if(s.length() != t.length()){
                    return false;
                }
                int[] freq = new int[26];
                for (int i = 0; i < t.length(); i++){
                    ++freq[t.charAt(i) - 'a'];
                }
                for (int i = 0; i < s.length(); i++){
                    if (--freq[s.charAt(i) - 'a'] < 0){
                        return false;
                    }                
                }            
                return true;
            }
        }

