36. Valid Sudoku
    (Array, Hash Table, Matrix)

    Question:
        Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

        Each row must contain the digits 1-9 without repetition.
        Each column must contain the digits 1-9 without repetition.
        Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
        Note:

        A Sudoku board (partially filled) could be valid but is not necessarily solvable.
        Only the filled cells need to be validated according to the mentioned rules.
    
    Code:

        class Solution {
            public boolean isValidSudoku(char[][] board) {
                for(int i = 0; i < board.length; i++){
                    for(int j =0 ;j < board[0].length; j++){
                        if(board[i][j] == '.'){
                            continue;
                        }else{
                            for(int c = i+1; c < board[0].length;c++){
                                if(board[i][j] == board[c][j]) return false;
                            }
                            for(int d= j+1;d< board.length; d++){
                                if(board[i][j] == board[i][d])return false;
                            }
                            int row = (i/3)*3;
                            int col = (j/3)*3;
                            for(int c = row; c < row+3; c++){
                            for(int d = col; d < col+3; d++){
                                if(c == i && d == j) continue;
                                if(board[i][j] == board[c][d]){
                                    return false;
                                }
                            }
                            }               
                                
                    }
                }
                }
                return true;
            }

        }

74. Search a 2D Matrix
    (Array, Binary Search, Matrix)

    Question:
        Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

        Integers in each row are sorted from left to right.
        The first integer of each row is greater than the last integer of the previous row.
        

        Example 1:


        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
        Output: true
        Example 2:


        Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
        Output: false
        

        Constraints:

        m == matrix.length
        n == matrix[i].length
        1 <= m, n <= 100
        -104 <= matrix[i][j], target <= 104
    
    Code:
        class Solution {
            public boolean searchMatrix(int[][] matrix, int target) {
                int i = matrix.length-1;
                int j = 0;
                
                while( i >= 0 && j < matrix[0].length){            
                    if(matrix[i][j] == target){
                        return true;
                    }else if(matrix[i][j] > target){
                        i--;
                    }else if( matrix[i][j]< target){
                        j++;
                    }
                }
                return false;
            }
        }