217. Contains Duplicate
    (array, hashTable, sorting)

    Question:

        Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

        

        Example 1:

        Input: nums = [1,2,3,1]
        Output: true
        Example 2:

        Input: nums = [1,2,3,4]
        Output: false
        Example 3:

        Input: nums = [1,1,1,3,3,4,3,2,4,2]
        Output: true
        

        Constraints:

        1 <= nums.length <= 105
        -109 <= nums[i] <= 109

    Answer:

        class Solution {
            public boolean containsDuplicate(int[] nums) {
                
                HashSet<Integer> set = new HashSet<>();
                for(int i = 0; i < nums.length; i++){
                    
                    if(set.contains(nums[i]) == true){
                        return true;
                    }
                    set.add(nums[i]);
                }
                return false;
            }
        }

53. Maximum Subarray
    (Array, Divide and Conquer)

    Question: 

        Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

        A subarray is a contiguous part of an array.

        

        Example 1:

        Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
        Output: 6
        Explanation: [4,-1,2,1] has the largest sum = 6.
        Example 2:

        Input: nums = [1]
        Output: 1
        Example 3:

        Input: nums = [5,4,-1,7,8]
        Output: 23
        

        Constraints:

        1 <= nums.length <= 105
        -104 <= nums[i] <= 104

    Answer: 

        (i)Brute Force
            class Solution {
                public int maxSubArray(int[] nums) {
                    int sum = Integer.MIN_VALUE;
                    for(int i = 0; i < nums.length; i++){
                        for(int j = i; j < nums.length; j++){
                            int currentSum = 0;
                            for(int k = i; k <= j; k++){
                                currentSum += nums[k];
                            }
                            if(sum < currentSum){
                                sum = currentSum;
                            }
                        }
                    }
                    return sum;
                }
            }

        (ii)

        

