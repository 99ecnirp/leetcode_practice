350. Intersection of Two Arrays II
    (Array, Hash Table, Two Pointers)

    Question:
        Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

        Example 1:

        Input: nums1 = [1,2,2,1], nums2 = [2,2]
        Output: [2]
        Example 2:

        Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
        Output: [9,4]
        Explanation: [4,9] is also accepted.
        

        Constraints:

        1 <= nums1.length, nums2.length <= 1000
        0 <= nums1[i], nums2[i] <= 1000
    
    Code:

        class Solution {
            public int[] intersect(int[] nums1, int[] nums2) {
                
                ArrayList<Integer> list = new ArrayList<>();
                HashMap<Integer, Integer> map1 = new HashMap<>();
                HashMap<Integer, Integer> map2 = new HashMap<>();
                
                for(int i = 0; i < nums1.length; i++){
                    if(map1.containsKey(nums1[i])){
                        map1.put(nums1[i], map1.get(nums1[i]) + 1);
                    }else{
                        map1.put(nums1[i], 1);
                    }
                }
                for(int i = 0; i < nums2.length; i++){
                    if(map2.containsKey(nums2[i])){
                        map2.put(nums2[i], map2.get(nums2[i]) + 1);
                    }else{
                        map2.put(nums2[i], 1);
                    }
                }
                
                for(Integer elem : map1.keySet()){
                    if(map2.containsKey(elem)){
                        int min = Math.min(map1.get(elem), map2.get(elem));
                        for(int i = 0; i < min; i++){
                            list.add(elem);
                        }
                    }
                }
                
                int[] arr = new int[list.size()];
                for(int i = 0; i < list.size(); i++){
                    arr[i] = list.get(i);
                }
                
                return arr;
            }
        }

121. Best Time to Buy and Sell Stock
    (Array, Dynamic Programming)

    Question:
        You are given an array prices where prices[i] is the price of a given stock on the ith day.

        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

        

        Example 1:

        Input: prices = [7,1,5,3,6,4]
        Output: 5
        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
        Example 2:

        Input: prices = [7,6,4,3,1]
        Output: 0
        Explanation: In this case, no transactions are done and the max profit = 0.
        

        Constraints:

        1 <= prices.length <= 105
        0 <= prices[i] <= 104

    Code:
        class Solution {
            public int maxProfit(int[] prices) {
                int[] msf = new int[prices.length];
                msf[msf.length - 1] = prices[prices.length - 1];
                
                for(int i = prices.length - 2; i >= 0; i--){
                    msf[i] = Math.max(prices[i], msf[i+1]);
                }
                
                int maxProfit = Integer.MIN_VALUE;
                
                for(int i = 0; i < prices.length; i++){
                    maxProfit = Math.max(maxProfit, msf[i] - prices[i]);
                }
                
                return maxProfit;
            }
        }

    